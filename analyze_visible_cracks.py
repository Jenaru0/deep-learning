#!/usr/bin/env python3
"""
üî¨ AN√ÅLISIS R√ÅPIDO DE FISURAS VISIBLES - CRACK500
=====================================================
Script optimizado para analizar im√°genes con fisuras reales visibles
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
import json
import os
from pathlib import Path
import tensorflow as tf
from sklearn.metrics import accuracy_score, classification_report
import math
from datetime import datetime

# Configuraci√≥n
plt.style.use('default')
np.random.seed(42)

class VisibleCrackAnalyzer:
    def __init__(self):
        print("üî¨ ANALIZADOR DE FISURAS VISIBLES CRACK500")
        print("=" * 50)
        
        # Rutas
        self.crack500_images = Path("data/external/CRACK500/images")
        self.crack500_masks = Path("data/external/CRACK500/masks") 
        self.results_dir = Path("results/visible_crack_analysis")
        self.results_dir.mkdir(exist_ok=True)
        
        # Cargar modelo
        model_path = "models/simple_crack_detector.keras"
        print(f"Cargando modelo: {model_path}")
        self.model = tf.keras.models.load_model(model_path)
        print("‚úÖ Modelo cargado exitosamente")
        
    def get_crack_images_with_masks(self, limit=5):
        """Obtener im√°genes con fisuras que tienen m√°scaras"""
        crack_images = []
        
        # Buscar im√°genes base (sin sufijos de patches)
        for mask_file in self.crack500_masks.glob("*.png"):
            base_name = mask_file.stem.replace("_mask", "")
            img_file = self.crack500_images / f"{base_name}.jpg"
            
            if img_file.exists() and len(crack_images) < limit:
                crack_images.append({
                    'image': img_file,
                    'mask': mask_file,
                    'name': base_name
                })
                
        return crack_images
    
    def preprocess_image(self, image_path):
        """Preprocesar imagen para el modelo"""
        img = cv2.imread(str(image_path))
        if img is None:
            return None
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        img_resized = cv2.resize(img_rgb, (128, 128))  # Tama√±o correcto: 128x128
        img_normalized = img_resized.astype(np.float32) / 255.0
        return img_normalized
    
    def detect_crack_contours(self, image):
        """Detectar contornos de fisuras con m√∫ltiples t√©cnicas"""
        gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
        
        # T√©cnica 1: Canny adaptativo
        edges1 = cv2.Canny(gray, 30, 100)
        edges2 = cv2.Canny(gray, 50, 150)
        edges_combined = cv2.bitwise_or(edges1, edges2)
        
        # T√©cnica 2: Morfolog√≠a para conectar fisuras
        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
        edges_dilated = cv2.dilate(edges_combined, kernel, iterations=1)
        edges_closed = cv2.morphologyEx(edges_dilated, cv2.MORPH_CLOSE, kernel)
        
        # Encontrar contornos
        contours, _ = cv2.findContours(edges_closed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        # Filtrar contornos por √°rea
        valid_contours = []
        for cnt in contours:
            area = cv2.contourArea(cnt)
            if area > 20:  # √Årea m√≠nima
                valid_contours.append(cnt)
        
        return valid_contours, edges_combined
    
    def analyze_crack_orientation(self, contours):
        """Analizar orientaci√≥n de fisuras"""
        if not contours:
            return None
            
        orientations = []
        for cnt in contours:
            if len(cnt) >= 5:
                ellipse = cv2.fitEllipse(cnt)
                angle = ellipse[2]
                orientations.append(angle)
        
        if not orientations:
            return None
            
        avg_angle = np.mean(orientations)
        
        # Clasificar orientaci√≥n
        if 0 <= avg_angle <= 30 or 150 <= avg_angle <= 180:
            orientation_type = "Horizontal"
        elif 60 <= avg_angle <= 120:
            orientation_type = "Vertical"
        else:
            orientation_type = "Diagonal"
            
        return {
            'average_angle': float(avg_angle),
            'type': orientation_type,
            'angles': [float(a) for a in orientations],
            'count': len(orientations)
        }
    
    def calculate_crack_metrics(self, mask_path, contours):
        """Calcular m√©tricas de fisura usando m√°scara ground truth"""
        if not mask_path.exists():
            return None
            
        # Cargar m√°scara ground truth
        mask = cv2.imread(str(mask_path), cv2.IMREAD_GRAYSCALE)
        if mask is None:
            return None
            
        # Calcular m√©tricas de la m√°scara
        crack_pixels = np.sum(mask > 127)
        total_pixels = mask.shape[0] * mask.shape[1]
        density = crack_pixels / total_pixels
        
        # Encontrar contornos en la m√°scara
        mask_contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        # Calcular ancho promedio
        width_measurements = []
        if mask_contours:
            for cnt in mask_contours:
                if cv2.contourArea(cnt) > 10:
                    # Aproximar ancho usando √°rea/per√≠metro
                    area = cv2.contourArea(cnt)
                    perimeter = cv2.arcLength(cnt, True)
                    if perimeter > 0:
                        approx_width = area / perimeter
                        width_measurements.append(approx_width)
        
        avg_width = np.mean(width_measurements) if width_measurements else 0
        
        return {
            'crack_pixel_count': int(crack_pixels),
            'total_pixels': int(total_pixels),
            'density_percentage': float(density * 100),
            'average_width_pixels': float(avg_width),
            'mask_contours_found': len(mask_contours),
            'detected_contours': len(contours)
        }
    
    def classify_severity(self, metrics):
        """Clasificar severidad basada en m√©tricas"""
        if not metrics:
            return "sin_fisura", "green", "No detectada"
            
        density = metrics['density_percentage']
        avg_width = metrics['average_width_pixels']
        
        if density < 0.1:
            return "leve", "yellow", "Fisura muy leve"
        elif density < 0.5:
            return "moderada", "orange", "Fisura moderada"
        elif density < 1.0:
            return "severa", "red", "Fisura severa"
        else:
            return "critica", "darkred", "Fisura cr√≠tica"
    
    def create_analysis_visualization(self, image_info, prediction, contours, edges, orientation, metrics, severity_info):
        """Crear visualizaci√≥n t√©cnica completa"""
        
        # Cargar imagen original
        img_orig = cv2.imread(str(image_info['image']))
        img_orig = cv2.cvtColor(img_orig, cv2.COLOR_BGR2RGB)
        
        # Cargar m√°scara
        mask = cv2.imread(str(image_info['mask']), cv2.IMREAD_GRAYSCALE)
        
        # Crear figura
        fig = plt.figure(figsize=(20, 12))
        fig.suptitle(f'AN√ÅLISIS T√âCNICO DE FISURA VISIBLE: {image_info["name"]}', 
                    fontsize=16, fontweight='bold')
        
        # 1. Imagen original
        ax1 = plt.subplot(2, 4, 1)
        plt.imshow(img_orig)
        plt.title('Imagen Original', fontweight='bold')
        plt.axis('off')
        
        # 2. M√°scara ground truth
        ax2 = plt.subplot(2, 4, 2)
        plt.imshow(mask, cmap='hot')
        plt.title('Ground Truth Mask', fontweight='bold')
        plt.axis('off')
        
        # 3. Detecci√≥n de bordes
        ax3 = plt.subplot(2, 4, 3)
        plt.imshow(edges, cmap='gray')
        plt.title('Detecci√≥n de Bordes', fontweight='bold')
        plt.axis('off')
        
        # 4. Contornos detectados
        ax4 = plt.subplot(2, 4, 4)
        img_contours = img_orig.copy()
        if contours:
            cv2.drawContours(img_contours, contours, -1, (0, 255, 0), 2)
        plt.imshow(img_contours)
        plt.title(f'Contornos ({len(contours)} detectados)', fontweight='bold')
        plt.axis('off')
        
        # 5. Mapa de calor de predicci√≥n
        ax5 = plt.subplot(2, 4, 5)
        prob = prediction['probability']
        heatmap = np.full((100, 100), prob)
        plt.imshow(heatmap, cmap='YlOrRd', vmin=0, vmax=1)
        plt.colorbar(shrink=0.8)
        plt.title(f'Probabilidad CNN: {prob:.3f}', fontweight='bold')
        plt.axis('off')
        
        # 6. An√°lisis de orientaci√≥n
        ax6 = plt.subplot(2, 4, 6)
        if orientation:
            # Crear rosa de vientos simplificada
            angles = np.array(orientation['angles']) * np.pi / 180
            plt.hist(angles, bins=8, alpha=0.7, color='skyblue')
            plt.title(f'Orientaci√≥n: {orientation["type"]}\n{orientation["average_angle"]:.1f}¬∞', 
                     fontweight='bold')
        else:
            plt.text(0.5, 0.5, 'Sin orientaci√≥n\ndetectable', ha='center', va='center', 
                    transform=ax6.transAxes, fontsize=12)
            plt.title('Orientaci√≥n', fontweight='bold')
        plt.axis('off')
        
        # 7. M√©tricas cuantitativas
        ax7 = plt.subplot(2, 4, 7)
        if metrics:
            metrics_text = f"""M√âTRICAS T√âCNICAS:
            
Densidad: {metrics['density_percentage']:.2f}%
P√≠xeles afectados: {metrics['crack_pixel_count']}
Ancho promedio: {metrics['average_width_pixels']:.1f}px
Contornos GT: {metrics['mask_contours_found']}
Contornos detectados: {metrics['detected_contours']}"""
        else:
            metrics_text = "Sin m√©tricas\ndisponibles"
            
        plt.text(0.05, 0.95, metrics_text, transform=ax7.transAxes, 
                fontsize=10, verticalalignment='top', fontfamily='monospace')
        plt.title('M√©tricas Cuantitativas', fontweight='bold')
        plt.axis('off')
        
        # 8. Clasificaci√≥n final
        ax8 = plt.subplot(2, 4, 8)
        severity, color, description = severity_info
        
        result_text = f"""CLASIFICACI√ìN FINAL:
        
Severidad: {severity.upper()}
Descripci√≥n: {description}
Confianza CNN: {prediction['probability']:.1%}
Estado: FISURA CONFIRMADA"""
        
        plt.text(0.05, 0.95, result_text, transform=ax8.transAxes, 
                fontsize=11, verticalalignment='top', fontweight='bold', 
                color=color)
        plt.title('Resultado Final', fontweight='bold')
        plt.axis('off')
        
        plt.tight_layout()
        return fig
    
    def analyze_crack_image(self, image_info, index):
        """Analizar una imagen con fisura"""
        print(f"\n{'='*50}")
        print(f"üîç AN√ÅLISIS {index}: {image_info['name']}")
        print(f"{'='*50}")
        
        # Preprocesar imagen
        img_processed = self.preprocess_image(image_info['image'])
        if img_processed is None:
            print("‚ùå Error cargando imagen")
            return None
            
        # Predicci√≥n CNN
        prediction = self.model.predict(np.expand_dims(img_processed, axis=0), verbose=0)
        prob = float(prediction[0][0])
        
        print(f"üß† Predicci√≥n CNN: {prob:.3f}")
        
        # Cargar imagen para an√°lisis visual
        img_full = cv2.imread(str(image_info['image']))
        img_full = cv2.cvtColor(img_full, cv2.COLOR_BGR2RGB)
        
        # Detectar contornos
        contours, edges = self.detect_crack_contours(img_full)
        print(f"üîç Contornos detectados: {len(contours)}")
        
        # An√°lisis de orientaci√≥n
        orientation = self.analyze_crack_orientation(contours)
        if orientation:
            print(f"üìê Orientaci√≥n: {orientation['type']} ({orientation['average_angle']:.1f}¬∞)")
        
        # M√©tricas usando ground truth
        metrics = self.calculate_crack_metrics(image_info['mask'], contours)
        if metrics:
            print(f"üìä Densidad: {metrics['density_percentage']:.2f}%")
        
        # Clasificaci√≥n de severidad
        severity_info = self.classify_severity(metrics)
        print(f"‚ö†Ô∏è  Severidad: {severity_info[0].upper()} - {severity_info[2]}")
        
        # Crear visualizaci√≥n
        fig = self.create_analysis_visualization(
            image_info, {'probability': prob}, contours, edges, 
            orientation, metrics, severity_info
        )
        
        # Guardar imagen
        output_path = self.results_dir / f"visible_crack_{index:02d}_{image_info['name']}_analysis.png"
        fig.savefig(output_path, dpi=300, bbox_inches='tight')
        plt.close(fig)
        
        print(f"‚úÖ An√°lisis guardado: {output_path.name}")
        
        # Guardar datos JSON
        analysis_data = {
            'image_info': {
                'filename': image_info['name'],
                'image_path': str(image_info['image']),
                'mask_path': str(image_info['mask'])
            },
            'cnn_prediction': {
                'probability': prob,
                'classification': 'crack' if prob > 0.5 else 'no_crack'
            },
            'morphological_analysis': {
                'contours_detected': len(contours),
                'method': 'Multi-Canny + Enhanced Morphology'
            },
            'orientation_analysis': orientation,
            'ground_truth_metrics': metrics,
            'severity_classification': {
                'level': severity_info[0],
                'color': severity_info[1],
                'description': severity_info[2]
            },
            'analysis_timestamp': datetime.now().isoformat()
        }
        
        json_path = self.results_dir / f"visible_crack_{index:02d}_{image_info['name']}_data.json"
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(analysis_data, f, indent=2, ensure_ascii=False)
        
        return analysis_data
    
    def run_analysis(self):
        """Ejecutar an√°lisis completo"""
        print("üì∏ Buscando im√°genes con fisuras visibles...")
        
        # Obtener im√°genes con fisuras
        crack_images = self.get_crack_images_with_masks(limit=5)
        
        if not crack_images:
            print("‚ùå No se encontraron im√°genes con fisuras y m√°scaras")
            return
            
        print(f"‚úÖ Encontradas {len(crack_images)} im√°genes con fisuras")
        
        results = []
        for i, image_info in enumerate(crack_images, 1):
            try:
                result = self.analyze_crack_image(image_info, i)
                if result:
                    results.append(result)
            except Exception as e:
                print(f"‚ùå Error en an√°lisis {i}: {e}")
                continue
        
        print(f"\nüéâ AN√ÅLISIS COMPLETADO")
        print(f"üìÅ Ubicaci√≥n: {self.results_dir}")
        print(f"üéØ {len(results)} an√°lisis exitosos de fisuras visibles")
        print(f"üìä ¬°Listo para presentaci√≥n t√©cnica!")

if __name__ == "__main__":
    analyzer = VisibleCrackAnalyzer()
    analyzer.run_analysis()