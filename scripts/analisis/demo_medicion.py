"""
Demo del Sistema de Medici√≥n de Par√°metros Estructurales
=========================================================

Script de demostraci√≥n que procesa im√°genes de prueba del dataset CRACK500
y genera an√°lisis completo con visualizaciones.

Uso:
    python demo_medicion.py [--num-imagenes N] [--pixeles-por-mm X]
"""

import os
import sys
from pathlib import Path
import random

# A√±adir ruta ra√≠z
ROOT_DIR = Path(__file__).resolve().parent.parent.parent
sys.path.append(str(ROOT_DIR))

from scripts.analisis.medir_parametros import (
    configurar_gpu,
    ModeloSegmentacion,
    analizar_fisura_completo
)
from config import RUTA_CRACK500


def obtener_imagenes_muestra(num_imagenes: int = 5):
    """Obtiene im√°genes aleatorias del dataset CRACK500 para demo."""
    test_dir = os.path.join(RUTA_CRACK500, 'images')
    
    if not os.path.exists(test_dir):
        print(f"‚ùå No se encontr√≥ el directorio: {test_dir}")
        return []
    
    # Obtener todas las im√°genes .jpg
    imagenes = [f for f in os.listdir(test_dir) if f.endswith('.jpg')]
    
    if len(imagenes) == 0:
        print(f"‚ùå No se encontraron im√°genes en: {test_dir}")
        return []
    
    # Seleccionar muestra aleatoria
    muestra = random.sample(imagenes, min(num_imagenes, len(imagenes)))
    
    return [os.path.join(test_dir, img) for img in muestra]


def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='Demo de an√°lisis de par√°metros de fisuras')
    parser.add_argument('--num-imagenes', type=int, default=5,
                        help='N√∫mero de im√°genes a procesar (default: 5)')
    parser.add_argument('--pixeles-por-mm', type=float, default=1.0,
                        help='Calibraci√≥n p√≠xeles/mm (default: 1.0)')
    parser.add_argument('--umbral', type=float, default=0.5,
                        help='Umbral de segmentaci√≥n (default: 0.5)')
    
    args = parser.parse_args()
    
    print(f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                      ‚ïë
‚ïë       DEMO: SISTEMA DE MEDICI√ìN DE PAR√ÅMETROS ESTRUCTURALES         ‚ïë
‚ïë                                                                      ‚ïë
‚ïë  üìè Medici√≥n de ancho (skeletonization + distance transform)        ‚ïë
‚ïë  üß≠ Detecci√≥n de orientaci√≥n (Hough line transform)                 ‚ïë
‚ïë  üï≥Ô∏è  Estimaci√≥n de profundidad visual (an√°lisis de intensidad)      ‚ïë
‚ïë                                                                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")
    
    # Configurar GPU
    configurar_gpu()
    
    # Obtener im√°genes de muestra
    print(f"\nüìÇ Buscando {args.num_imagenes} im√°genes de muestra...")
    imagenes = obtener_imagenes_muestra(args.num_imagenes)
    
    if len(imagenes) == 0:
        print("‚ùå No se encontraron im√°genes para procesar")
        return
    
    print(f"   ‚úÖ {len(imagenes)} im√°genes seleccionadas")
    
    # Cargar modelo una sola vez
    print("\nüîÑ Cargando modelo U-Net...")
    modelo = ModeloSegmentacion()
    modelo.cargar()
    
    # Procesar cada imagen
    resultados_totales = []
    
    for i, imagen_path in enumerate(imagenes, 1):
        print(f"\n{'='*70}")
        print(f"Procesando imagen {i}/{len(imagenes)}")
        print(f"{'='*70}")
        
        try:
            resultado = analizar_fisura_completo(
                imagen_path=imagen_path,
                modelo=modelo,
                pixeles_por_mm=args.pixeles_por_mm,
                umbral_segmentacion=args.umbral,
                guardar_visualizacion=True
            )
            
            resultados_totales.append(resultado)
            
        except Exception as e:
            print(f"‚ùå Error procesando {os.path.basename(imagen_path)}: {e}")
            continue
    
    # Resumen final
    print(f"\n{'='*70}")
    print(f"üìä RESUMEN FINAL")
    print(f"{'='*70}")
    print(f"Im√°genes procesadas: {len(resultados_totales)}/{len(imagenes)}")
    
    if len(resultados_totales) > 0:
        # Estad√≠sticas de ancho
        anchos_promedio = [r['ancho']['ancho_promedio_mm'] for r in resultados_totales 
                          if r['ancho']['ancho_promedio_mm'] > 0]
        
        if anchos_promedio:
            print(f"\nüìè Estad√≠sticas de Ancho:")
            print(f"   ‚Ä¢ Promedio general: {sum(anchos_promedio)/len(anchos_promedio):.2f} mm")
            print(f"   ‚Ä¢ M√°ximo encontrado: {max(anchos_promedio):.2f} mm")
            print(f"   ‚Ä¢ M√≠nimo encontrado: {min(anchos_promedio):.2f} mm")
        
        # Distribuci√≥n de orientaciones
        orientaciones = [r['orientacion']['orientacion'] for r in resultados_totales]
        from collections import Counter
        dist_orientacion = Counter(orientaciones)
        
        print(f"\nüß≠ Distribuci√≥n de Orientaciones:")
        for orient, count in dist_orientacion.items():
            porcentaje = (count / len(orientaciones)) * 100
            print(f"   ‚Ä¢ {orient}: {count} ({porcentaje:.1f}%)")
        
        # Distribuci√≥n de profundidades
        profundidades = [r['profundidad']['profundidad_categoria'] for r in resultados_totales]
        dist_profundidad = Counter(profundidades)
        
        print(f"\nüï≥Ô∏è  Distribuci√≥n de Profundidades (Visual):")
        for prof, count in dist_profundidad.items():
            porcentaje = (count / len(profundidades)) * 100
            print(f"   ‚Ä¢ {prof}: {count} ({porcentaje:.1f}%)")
        
        # Ubicaci√≥n de resultados
        dir_salida = os.path.join(ROOT_DIR, 'resultados', 'analisis_parametros')
        print(f"\nüíæ Visualizaciones guardadas en:")
        print(f"   {dir_salida}")
    
    print(f"\n{'='*70}")
    print(f"‚úÖ DEMO COMPLETADA")
    print(f"{'='*70}\n")


if __name__ == '__main__':
    main()
